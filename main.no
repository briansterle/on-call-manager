package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/jackc/pgx/v5"
	_ "github.com/lib/pq"
)

type ActiveCall struct {
	Id          int    `json:id`
	Address     string `json:address`
	PatientName string `json:patient_name`
	OpenTs      string `json:open_ts`
	ClosedTs    string `json:closed_ts`
	UpdTs       string `json:upd_ts`
	ResponderId int    `json:responder_id`
	Status      string `json:status`
	Notes       string `json:notes`
}

func getActiveCalls(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	activeCall := ActiveCall{
		Id:          1,
		Address:     "2400 Miami Valley Dr, Centerville, OH 45459",
		PatientName: "Jane Doe",
		OpenTs:      time.Now().String(),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(activeCall)

}

func initDB(db *pgx.Conn) error {
	script, err := os.ReadFile("init.sql")
	if err != nil {
		return err
	}

	_, err = db.Exec(context.Background(), string(script))
	return err
}

func main() {
	conn, err := pgx.Connect(context.Background(), os.Getenv("POSTGRES_URL"))
	if err != nil {
		fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
		os.Exit(1)
	}
	err = initDB(conn)
	if err != nil {
		fmt.Println(err)
	}

	defer conn.Close(context.Background())

	// var name string
	// var weight int64
	// err = conn.QueryRow(context.Background(), "select name, weight from widgets where id=$1", 42).Scan(&name, &weight)
	// if err != nil {
	// 	fmt.Fprintf(os.Stderr, "QueryRow failed: %v\n", err)
	// 	os.Exit(1)
	// }
	// fmt.Println(name, weight)

	http.HandleFunc("/active-calls", getActiveCalls)

	fmt.Println("Server is running on http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", nil))

}
